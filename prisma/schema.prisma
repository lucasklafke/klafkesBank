// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Associate {
  id             Int           @id @default(autoincrement())
  name           String
  cpf            String
  birthdate      DateTime      @db.Date
  createdAt      String
  latitude       String?
  longitude      String?
  vigencyDate    DateTime      @default(now())
  vigencyEndDate DateTime?
  password       String
  Account        Account[]
  CardAccount    CardAccount[]

  @@map("associate")
}

model CardRequest {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime?     @default(now())
  logo           String
  account_number String?
  end_date       DateTime?
  current_status String
  describe       String
  push_describe  String
  CardProcess    CardProcess[]
}

model CardProcess {
  id             Int         @id @default(autoincrement())
  card_id        Int
  card           Card        @relation(fields: [card_id], references: [id])
  card_request   Int
  CardRequest    CardRequest @relation(fields: [card_request], references: [id])
  createdAt      DateTime    @default(now())
  current_status String
}

model Card {
  id              Int           @id @default(autoincrement())
  number          String        @unique
  name            String
  cvv             String
  expirationDate  DateTime
  logo            String
  createdAt       DateTime?     @default(now())
  block_code      String
  blockDate       DateTime?
  isMainCard      Boolean?
  type            String
  CardProcess     CardProcess[]
  password        String
  cpf             String
  card_account_id Int
}

model Limit {
  id                      Int         @id @default(autoincrement())
  change_date             DateTime?   @default(now())
  card_account_id         Int
  current_selected_limit  Int // column to see the current selected limit
  previous_selected_limit Int // column to see the last ocurrency of the selected_limit
  previous_id             Int? // if of the last ocurrency of limit
  vingency_date           DateTime?   @default(now())
  current                 Boolean
  CardAccount             CardAccount @relation(fields: [card_account_id], references: [id])
}

model Account {
  id             Int           @id @default(autoincrement())
  account_number String
  createdAt      DateTime?     @default(now())
  canceledAt     DateTime?
  status         String
  associateId    Int
  Associate      Associate     @relation(fields: [associateId], references: [id])
  balance        Int
  account_type   String
  updatedAt      DateTime      @default(now())
  CardAccount    CardAccount[]
}

model CardAccount {
  id              Int        @id @default(autoincrement())
  accountId       Int
  approved_limit  Int //maximum limit 
  available_limit Int? //column to see available limit, or the balance of the account
  dueday          DateTime //day that finish restart your invoice_value
  invoice_value   Float //  column to see how much you have to pay when the dueday comes
  status          String //status of the account
  canceledAt      DateTime? // it was canceled? See when here
  createdAt       DateTime?  @default(now())
  block_code      String // block code is the column to see if it is blocked and why, the code show why!
  logo            String // logo is the column to categorize your cards and benefits, ex: gold, black, platinum
  default_code    String
  associateId     Int
  Limit           Limit[]
  Associate       Associate @relation(fields: [associateId], references: [id])
  Account         Account    @relation(fields: [accountId], references: [id])
}

model Purchase {
  id              Int       @id @default(autoincrement())
  amount          Int
  card_account_id Int
  createdAt       DateTime? @default(now())
}

model Deposit {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(now())
  amount    Float?
}
