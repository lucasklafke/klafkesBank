// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Associate {
  id             Int           @id @default(autoincrement())
  name           String
  cpf            String
  birthdate      DateTime      @db.Date
  createdAt      String
  latitude       String
  longitude      String
  vigencyDate    DateTime      @default(now())
  vigencyEndDate DateTime?
  password       String
  Account        Account[]
  CardAccount    CardAccount[]

  @@map("associate")
}

model CardRequest {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime?     @default(now())
  logo           String
  account_number String?
  end_date       DateTime?
  current_status String
  describe       String
  push_describe  String
  CardProcess    CardProcess[]
}

model CardProcess {
  id             Int         @id @default(autoincrement())
  card_id        Int
  card           Card        @relation(fields: [card_id], references: [id])
  card_request   Int
  CardRequest    CardRequest @relation(fields: [card_request], references: [id])
  createdAt      DateTime    @default(now())
  current_status String
  // Current_Status => ready to shipping, in coming, received
}

model Card {
  id              Int           @id @default(autoincrement())
  number          String        @unique
  name            String
  cvv             String
  expirationDate  DateTime
  logo            String
  createdAt       DateTime?     @default(now())
  block_code      String
  blockDate       DateTime?
  isMainCard      Boolean?
  type            String
  CardProcess     CardProcess[]
  Limit           Limit[]
  password        String
  cpf             String
  card_account_id Int
}

model Limit {
  id              Int         @id @default(autoincrement())
  change_date     DateTime?   @default(now())
  card_account_id Int
  CardAccount     CardAccount @relation(fields: [card_account_id], references: [id])
  used_limit      Int
  current_limit   Int
  previous_limit  Int
  previous_id     Int?
  vingency_date   DateTime?   @default(now())
  status          String
  Card            Card?       @relation(fields: [cardId], references: [id])
  cardId          Int?
}

model Account {
  id             Int           @id @default(autoincrement())
  account_number String
  createdAt      DateTime?     @default(now())
  canceledAt     DateTime?
  status         String
  associateId    Int
  Associate      Associate     @relation(fields: [associateId], references: [id])
  balance        Int
  account_type   String
  updatedAt      DateTime      @default(now())
  CardAccount    CardAccount[]
}

model CardAccount {
  id             Int        @id @default(autoincrement())
  accountId      Int
  Account        Account    @relation(fields: [accountId], references: [id])
  approved_limit Int
  selected_limit Int
  avaible_limit  Int?
  dueday         DateTime
  invoice_value  Float?
  status         String
  canceledAt     DateTime?
  createdAt      DateTime?  @default(now())
  block_code     String
  logo           String
  default_code   String
  Limit          Limit[]
  Associate      Associate? @relation(fields: [associateId], references: [id])
  associateId    Int?
}

model Purchase {
  id        Int       @id @default(autoincrement())
  amount    Int
  card_id   Int
  createdAt DateTime? @default(now())
}

model Deposit {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(now())
  amount    Float?
}
